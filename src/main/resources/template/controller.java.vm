package ${package.Controller};

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.xc.roadRisk.common.config.SwaggerAutoConfig;
import com.xc.roadRisk.common.utils.ResponseUtils;
import com.xc.roadRisk.common.vo.Response;
import com.xc.roadRisk.common.vo.PageList;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
##import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api("${table.comment} 服务")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
##@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    #set($entityName=${entity})
    #set($entityName=$entityName.substring(0,1).toLowerCase()+$entityName.substring(1,$entityName.length()))
    #set($apiName=$entityName+"Api")
    #set($resourceNames=$entityName+"s")
    #set($insertMethod=$apiName+".insert("+$entityName+")")
    #set($updateCode=$entityName +".setUid(uid);")
    #set($updateMethod=$apiName+".updateById("+$entityName+")")
    #set($getOneMethod=$apiName+".selectById(uid)")
    #set($getPageMethod=$apiName+".selectPage(new Page<>(pageNo, pageSize), new EntityWrapper<>("+$entityName+"));")

    @Autowired
    private ${table.serviceName} $apiName;

    @ApiOperation("创建单个${entity}")
    @ApiImplicitParam(name = "version", paramType = "path", allowableValues = SwaggerAutoConfig.COMPATIBLE_VERSION, required = true)
    @PostMapping("{version}/pv/$resourceNames")
    public Response<Boolean> insert(@RequestBody ${entity} $entityName) {
        return ResponseUtils.returnObjectSuccess($insertMethod);
    }

    @ApiOperation("编辑单个${entity}")
    @ApiImplicitParam(name = "version", paramType = "path", allowableValues = SwaggerAutoConfig.COMPATIBLE_VERSION, required = true)
    @PutMapping("{version}/pv/$resourceNames/{uid}")
    public Response<Boolean> updateById(@PathVariable("uid") Long uid, @RequestBody ${entity} $entityName) {
        $updateCode
        return ResponseUtils.returnObjectSuccess($updateMethod);
    }

    @ApiOperation("查询单个${entity}")
    @ApiImplicitParam(name = "version", paramType = "path", allowableValues = SwaggerAutoConfig.COMPATIBLE_VERSION, required = true)
    @GetMapping("{version}/pb/$resourceNames/{uid}")
    public Response<${entity}> selectById(@PathVariable("uid") Long uid) {
        return ResponseUtils.returnObjectSuccess($getOneMethod);
    }

    @ApiOperation("查询分页${entity}")
    @ApiImplicitParam(name = "version", paramType = "path", allowableValues = SwaggerAutoConfig.COMPATIBLE_VERSION, required = true)
    @GetMapping("{version}/pb/$resourceNames/action/search")
    public Response<PageList<${entity}>> selectPage(@RequestParam(value = "pageNo", defaultValue = "1") int pageNo,
                                                    @RequestParam(value = "pageSize", defaultValue = "10") int pageSize,
                                                    ${entity} $entityName) {
        Page<${entity}> page = $getPageMethod
        return ResponseUtils.returnObjectSuccess(new PageList<>(page));
    }
}
#end